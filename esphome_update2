automation:
  - alias: "Controlla e aggiorna ESPHome ogni giorno"
    trigger:
      - platform: time
        at: "01:00:00"
    action:
      - service: script.aggiorna_dispositivi_esphome  # Corretto il nome del servizio
################################################################################
################################################################################
input_text:
  esphome_aggiornati:
    name: "ESPHome Aggiornati"
    initial: ""
    max: 1000
  
  esphome_falliti:
    name: "ESPHome Falliti" 
    initial: ""
    max: 1000
################################################################################
################################################################################
script:
  aggiorna_dispositivi_esphome:
    alias: "üîÑ Aggiorna dispositivi ESPHome"
    mode: single
    sequence:
      - alias: "üìã Crea lista dispositivi aggiornabili"
        variables:
          dispositivi_esphome: >
            {{ states.update
                | selectattr('state', 'eq', 'on')
                | selectattr('entity_id', 'in', integration_entities('esphome'))
                | map(attribute='entity_id')
                | list }}
          
          # Verifica se l'addon ESPHome ha un aggiornamento disponibile
          esphome_addon_entity_id: "update.esphome_update"
          esphome_addon: >
            {% if states(esphome_addon_entity_id) == 'on' %}
              [ '{{ esphome_addon_entity_id }}' ]
            {% else %}
              []
            {% endif %}
          
          entita_da_aggiornare: "{{ dispositivi_esphome + esphome_addon }}"
      
      # Interrompi se non ci sono aggiornamenti disponibili
      - condition: template
        value_template: "{{ entita_da_aggiornare | length > 0 }}"
      
      - alias: "üìã Inizializza variabili per i risultati"
        variables:
          aggiornati: []
          falliti: []
      
      - alias: "üîÅ Esegui aggiornamenti in sequenza"
        repeat:
          for_each: "{{ entita_da_aggiornare }}"
          sequence:
            - variables:
                dispositivo_corrente: "{{ repeat.item }}"
                nome_dispositivo: "{{ state_attr(repeat.item, 'friendly_name') or repeat.item }}"
            
            - service: update.install
              target:
                entity_id: "{{ dispositivo_corrente }}"
              data: {}
              continue_on_error: true
            
            - wait_template: "{{ is_state(dispositivo_corrente, 'off') }}"
              timeout: "00:03:00"
              continue_on_timeout: true
            
            # Usa input_text helper per memorizzare i risultati
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ is_state(dispositivo_corrente, 'off') }}"
                  sequence:
                    - service: input_text.set_value
                      target:
                        entity_id: input_text.esphome_aggiornati
                      data:
                        value: >
                          {% set current = states('input_text.esphome_aggiornati') %}
                          {% if current == 'unknown' or current == '' %}
                            {{ nome_dispositivo }}
                          {% else %}
                            {{ current + ',' + nome_dispositivo }}
                          {% endif %}
              default:
                - service: input_text.set_value
                  target:
                    entity_id: input_text.esphome_falliti
                  data:
                    value: >
                      {% set current = states('input_text.esphome_falliti') %}
                      {% if current == 'unknown' or current == '' %}
                        {{ nome_dispositivo }}
                      {% else %}
                        {{ current + ',' + nome_dispositivo }}
                      {% endif %}
            
            - delay: "00:00:05"
      
      - alias: "üì± Invia notifica finale"
        variables:
          aggiornati_lista: >
            {% set aggiornati_str = states('input_text.esphome_aggiornati') %}
            {% if aggiornati_str not in ['unknown', ''] %}
              {{ aggiornati_str.split(',') }}
            {% else %}
              []
            {% endif %}
          falliti_lista: >
            {% set falliti_str = states('input_text.esphome_falliti') %}
            {% if falliti_str not in ['unknown', ''] %}
              {{ falliti_str.split(',') }}
            {% else %}
              []
            {% endif %}
        sequence:
          - service: notify.my_phone #cambia con il tuo servizio di notifica
            data:
              title: "üîÑ Aggiornamento ESPHome"
              message: >
                {% if aggiornati_lista %}
                  ‚úÖ Aggiornati con successo:
                  {{ aggiornati_lista | join('\n') }}
                {% endif %}
                {% if falliti_lista %}
                  {% if aggiornati_lista %}{{ '\n' }}{% endif %}
                  ‚ùå Falliti:
                  {{ falliti_lista | join('\n') }}
                {% endif %}
################################################################################
################################################################################
          # Pulisci gli helper dopo l'uso
          - service: input_text.set_value
            target:
              entity_id: input_text.esphome_aggiornati
            data:
              value: ""
          
          - service: input_text.set_value
            target:
              entity_id: input_text.esphome_falliti
            data:
              value: ""
